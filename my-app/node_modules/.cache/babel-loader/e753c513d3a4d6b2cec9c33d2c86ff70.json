{"ast":null,"code":"var _jsxFileName = \"E:\\\\KTCity\\\\ReactJsCourse_KTCity\\\\my-app\\\\src\\\\components\\\\tictactoe\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useState } from \"react\";\nimport { calculateWinner } from \"../../helpers\";\nimport Board from \"./Board\";\nimport \"./GameStyle.css\"; //initialState = {}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  board: Array(9).fill(null),\n  xIsNext: true\n};\n\nconst Game = () => {\n  _s();\n\n  // const [state, setState] = useState({\n  //   board: Array(9).fill(null),\n  //   xIsNext: true,\n  // });\n  // immutable\n  // [...arr] {...obj}\n  // deep copy JSON.parse(JSON.stringify(obj))\n  const gameReducer = (state, action) => {\n    switch (action.type) {\n      case \"CLICK\":\n        const nextState = JSON.parse(JSON.stringify(state));\n        return nextState;\n\n      default:\n        break;\n    }\n\n    return state;\n  }; // const [board, setBoard] = useState(Array(9).fill(null));\n  // const [xIsNext, setXIsNext] = useState(true);\n  // useReducer\n\n\n  const [state, dispatch] = useReducer(gameReducer, initialState); // const action = {type: \"CLICK\", payload: {}}\n  // dispatch({type: \"CLICK\"})\n  // dispatch(action)\n\n  const winner = calculateWinner(state.board);\n\n  const handleClick = index => {\n    const boardCopy = [...state.board];\n\n    if (winner || boardCopy[index]) {\n      return;\n    }\n\n    dispatch({\n      type: \"CLICK\",\n      payload: {\n        index\n      }\n    });\n  }; //   boardCopy[index] = state.xIsNext ? \"X\" : \"O\";\n  //   setState({\n  //     ...state, // spread operator clone cái ban đầu\n  //     board: boardCopy,\n  //     xIsNext: !state.xIsNext,\n  //   });\n  //   // setBoard(boardCopy);\n  //   // setXIsNext(!xIsNext);\n  // };\n\n\n  const handleResetGame = () => {//   setState({\n    //     ...state,\n    //     board: Array(9).fill(null),\n    //     xIsNext: true,\n    //   });\n    // setXIsNext(true);\n    // setBoard(Array(9).fill(null));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: state.board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-winner\",\n      children: winner ? `Winner is ${winner}` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-reset\",\n      onClick: handleResetGame,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useReducer","useState","calculateWinner","Board","initialState","board","Array","fill","xIsNext","Game","gameReducer","state","action","type","nextState","JSON","parse","stringify","dispatch","winner","handleClick","index","boardCopy","payload","handleResetGame"],"sources":["E:/KTCity/ReactJsCourse_KTCity/my-app/src/components/tictactoe/Game.js"],"sourcesContent":["import React, { useReducer, useState } from \"react\";\r\nimport { calculateWinner } from \"../../helpers\";\r\nimport Board from \"./Board\";\r\nimport \"./GameStyle.css\";\r\n\r\n//initialState = {}\r\nconst initialState = {\r\n  board: Array(9).fill(null),\r\n  xIsNext: true,\r\n};\r\n\r\nconst Game = () => {\r\n  // const [state, setState] = useState({\r\n  //   board: Array(9).fill(null),\r\n  //   xIsNext: true,\r\n  // });\r\n\r\n  // immutable\r\n  // [...arr] {...obj}\r\n  // deep copy JSON.parse(JSON.stringify(obj))\r\n  const gameReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"CLICK\":\r\n        const nextState = JSON.parse(JSON.stringify(state));\r\n        return nextState;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    return state;\r\n  };\r\n\r\n  // const [board, setBoard] = useState(Array(9).fill(null));\r\n  // const [xIsNext, setXIsNext] = useState(true);\r\n  // useReducer\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  // const action = {type: \"CLICK\", payload: {}}\r\n  // dispatch({type: \"CLICK\"})\r\n  // dispatch(action)\r\n  const winner = calculateWinner(state.board);\r\n  const handleClick = (index) => {\r\n    const boardCopy = [...state.board];\r\n    if (winner || boardCopy[index]) {\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: \"CLICK\",\r\n      payload: {\r\n        index,\r\n      },\r\n    });\r\n  };\r\n  //   boardCopy[index] = state.xIsNext ? \"X\" : \"O\";\r\n  //   setState({\r\n  //     ...state, // spread operator clone cái ban đầu\r\n  //     board: boardCopy,\r\n  //     xIsNext: !state.xIsNext,\r\n  //   });\r\n  //   // setBoard(boardCopy);\r\n  //   // setXIsNext(!xIsNext);\r\n  // };\r\n  const handleResetGame = () => {\r\n    //   setState({\r\n    //     ...state,\r\n    //     board: Array(9).fill(null),\r\n    //     xIsNext: true,\r\n    //   });\r\n    // setXIsNext(true);\r\n    // setBoard(Array(9).fill(null));\r\n  };\r\n  return (\r\n    <div>\r\n      <Board cells={state.board} onClick={handleClick}></Board>\r\n      {winner && (\r\n        <div className=\"game-winner\">{winner ? `Winner is ${winner}` : \"\"}</div>\r\n      )}\r\n      <button className=\"game-reset\" onClick={handleResetGame}>\r\n        Reset Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,iBAAP,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADY;EAEnBC,OAAO,EAAE;AAFU,CAArB;;AAKA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACjB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;IACrC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,OAAL;QACE,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAlB;QACA,OAAOG,SAAP;;MAEF;QACE;IANJ;;IAQA,OAAOH,KAAP;EACD,CAVD,CATiB,CAqBjB;EACA;EACA;;;EACA,MAAM,CAACA,KAAD,EAAQO,QAAR,IAAoBlB,UAAU,CAACU,WAAD,EAAcN,YAAd,CAApC,CAxBiB,CAyBjB;EACA;EACA;;EACA,MAAMe,MAAM,GAAGjB,eAAe,CAACS,KAAK,CAACN,KAAP,CAA9B;;EACA,MAAMe,WAAW,GAAIC,KAAD,IAAW;IAC7B,MAAMC,SAAS,GAAG,CAAC,GAAGX,KAAK,CAACN,KAAV,CAAlB;;IACA,IAAIc,MAAM,IAAIG,SAAS,CAACD,KAAD,CAAvB,EAAgC;MAC9B;IACD;;IACDH,QAAQ,CAAC;MACPL,IAAI,EAAE,OADC;MAEPU,OAAO,EAAE;QACPF;MADO;IAFF,CAAD,CAAR;EAMD,CAXD,CA7BiB,CAyCjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,MAAMG,eAAe,GAAG,MAAM,CAC5B;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CARD;;EASA,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,KAAK,EAAEb,KAAK,CAACN,KAApB;MAA2B,OAAO,EAAEe;IAApC;MAAA;MAAA;MAAA;IAAA,QADF,EAEGD,MAAM,iBACL;MAAK,SAAS,EAAC,aAAf;MAAA,UAA8BA,MAAM,GAAI,aAAYA,MAAO,EAAvB,GAA2B;IAA/D;MAAA;MAAA;MAAA;IAAA,QAHJ,eAKE;MAAQ,SAAS,EAAC,YAAlB;MAA+B,OAAO,EAAEK,eAAxC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAtED;;GAAMf,I;;KAAAA,I;AAwEN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}