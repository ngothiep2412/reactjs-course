{"ast":null,"code":"var _jsxFileName = \"E:\\\\KTCity\\\\ReactJsCourse_KTCity\\\\my-app\\\\src\\\\components\\\\tictactoe\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { calculateWinner } from \"../../helpers\";\nimport Board from \"./Board\";\nimport \"./GameStyle.css\"; //initialState = {}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  board: Array(9).fill(null),\n  xIsNext: true\n};\n\nconst Game = () => {\n  _s();\n\n  // const [state, setState] = useState({\n  //   board: Array(9).fill(null),\n  //   xIsNext: true,\n  // });\n  // immutable\n  // [...arr] {...obj}\n  // deep copy JSON.parse(JSON.stringify(obj))\n  const gameReducer = (state, action) => {\n    switch (action.type) {\n      case \"RESET\":\n        {\n          // const { board, xIsNext } = state;\n          const nextState = JSON.parse(JSON.stringify(state));\n          nextState.board = Array(9).fill(null);\n          nextState.xIsNext = true; // nextState.xIsNext = true;\n          // nextState.board = Array(9).fill(null);\n          // console.log(nextState);\n          // return nextState;\n\n          return nextState;\n        }\n\n      case \"CLICK\":\n        {\n          const {\n            board,\n            xIsNext\n          } = state;\n          const {\n            index,\n            winner\n          } = action.payload;\n          if (winner || board[index]) return state;\n          const nextState = JSON.parse(JSON.stringify(state));\n          nextState.board[index] = xIsNext ? \"X\" : \"O\";\n          nextState.xIsNext = !xIsNext;\n          return nextState;\n        }\n\n      default:\n        break;\n    }\n\n    return state;\n  }; // const [board, setBoard] = useState(Array(9).fill(null));\n  // const [xIsNext, setXIsNext] = useState(true);\n  // useReducer\n\n\n  const [state, dispatch] = useReducer(gameReducer, initialState); // const action = {type: \"CLICK\", payload: {}}\n  // dispatch({type: \"CLICK\"})\n  // dispatch(action)\n\n  const winner = calculateWinner(state.board);\n\n  const handleClick = index => {\n    // const boardCopy = [...state.board];\n    // if (winner || boardCopy[index]) {\n    //   return;\n    // }\n    dispatch({\n      type: \"CLICK\",\n      payload: {\n        index,\n        winner\n      }\n    });\n  }; //   boardCopy[index] = state.xIsNext ? \"X\" : \"O\";\n  //   setState({\n  //     ...state, // spread operator clone cái ban đầu\n  //     board: boardCopy,\n  //     xIsNext: !state.xIsNext,\n  //   });\n  //   // setBoard(boardCopy);\n  //   // setXIsNext(!xIsNext);\n  // };\n\n\n  const handleResetGame = () => {\n    dispatch({\n      type: \"RESET\"\n    }); //   setState({\n    //     ...state,\n    //     board: Array(9).fill(null),\n    //     xIsNext: true,\n    //   });\n    // setXIsNext(true);\n    // setBoard(Array(9).fill(null));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: state.board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-winner\",\n      children: winner ? `Winner is ${winner}` : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-reset\",\n      onClick: handleResetGame,\n      children: \"Reset Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useReducer","calculateWinner","Board","initialState","board","Array","fill","xIsNext","Game","gameReducer","state","action","type","nextState","JSON","parse","stringify","index","winner","payload","dispatch","handleClick","handleResetGame"],"sources":["E:/KTCity/ReactJsCourse_KTCity/my-app/src/components/tictactoe/Game.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\nimport { calculateWinner } from \"../../helpers\";\r\nimport Board from \"./Board\";\r\nimport \"./GameStyle.css\";\r\n\r\n//initialState = {}\r\nconst initialState = {\r\n  board: Array(9).fill(null),\r\n  xIsNext: true,\r\n};\r\n\r\nconst Game = () => {\r\n  // const [state, setState] = useState({\r\n  //   board: Array(9).fill(null),\r\n  //   xIsNext: true,\r\n  // });\r\n\r\n  // immutable\r\n  // [...arr] {...obj}\r\n  // deep copy JSON.parse(JSON.stringify(obj))\r\n  const gameReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"RESET\": {\r\n        // const { board, xIsNext } = state;\r\n        const nextState = JSON.parse(JSON.stringify(state));\r\n        nextState.board = Array(9).fill(null);\r\n        nextState.xIsNext = true;\r\n        // nextState.xIsNext = true;\r\n        // nextState.board = Array(9).fill(null);\r\n        // console.log(nextState);\r\n        // return nextState;\r\n        return nextState;\r\n      }\r\n      case \"CLICK\": {\r\n        const { board, xIsNext } = state;\r\n        const { index, winner } = action.payload;\r\n        if (winner || board[index]) return state;\r\n        const nextState = JSON.parse(JSON.stringify(state));\r\n        nextState.board[index] = xIsNext ? \"X\" : \"O\";\r\n        nextState.xIsNext = !xIsNext;\r\n        return nextState;\r\n      }\r\n\r\n      default:\r\n        break;\r\n    }\r\n    return state;\r\n  };\r\n\r\n  // const [board, setBoard] = useState(Array(9).fill(null));\r\n  // const [xIsNext, setXIsNext] = useState(true);\r\n  // useReducer\r\n  const [state, dispatch] = useReducer(gameReducer, initialState);\r\n  // const action = {type: \"CLICK\", payload: {}}\r\n  // dispatch({type: \"CLICK\"})\r\n  // dispatch(action)\r\n  const winner = calculateWinner(state.board);\r\n  const handleClick = (index) => {\r\n    // const boardCopy = [...state.board];\r\n    // if (winner || boardCopy[index]) {\r\n    //   return;\r\n    // }\r\n    dispatch({\r\n      type: \"CLICK\",\r\n      payload: {\r\n        index,\r\n        winner,\r\n      },\r\n    });\r\n  };\r\n  //   boardCopy[index] = state.xIsNext ? \"X\" : \"O\";\r\n  //   setState({\r\n  //     ...state, // spread operator clone cái ban đầu\r\n  //     board: boardCopy,\r\n  //     xIsNext: !state.xIsNext,\r\n  //   });\r\n  //   // setBoard(boardCopy);\r\n  //   // setXIsNext(!xIsNext);\r\n  // };\r\n  const handleResetGame = () => {\r\n    dispatch({\r\n      type: \"RESET\",\r\n    });\r\n    //   setState({\r\n    //     ...state,\r\n    //     board: Array(9).fill(null),\r\n    //     xIsNext: true,\r\n    //   });\r\n    // setXIsNext(true);\r\n    // setBoard(Array(9).fill(null));\r\n  };\r\n  return (\r\n    <div>\r\n      <Board cells={state.board} onClick={handleClick}></Board>\r\n      {winner && (\r\n        <div className=\"game-winner\">{winner ? `Winner is ${winner}` : \"\"}</div>\r\n      )}\r\n      <button className=\"game-reset\" onClick={handleResetGame}>\r\n        Reset Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,iBAAP,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADY;EAEnBC,OAAO,EAAE;AAFU,CAArB;;AAKA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACjB;EACA;EACA;EACA;EAEA;EACA;EACA;EACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;IACrC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,OAAL;QAAc;UACZ;UACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAlB;UACAG,SAAS,CAACT,KAAV,GAAkBC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAlB;UACAO,SAAS,CAACN,OAAV,GAAoB,IAApB,CAJY,CAKZ;UACA;UACA;UACA;;UACA,OAAOM,SAAP;QACD;;MACD,KAAK,OAAL;QAAc;UACZ,MAAM;YAAET,KAAF;YAASG;UAAT,IAAqBG,KAA3B;UACA,MAAM;YAAEO,KAAF;YAASC;UAAT,IAAoBP,MAAM,CAACQ,OAAjC;UACA,IAAID,MAAM,IAAId,KAAK,CAACa,KAAD,CAAnB,EAA4B,OAAOP,KAAP;UAC5B,MAAMG,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAlB;UACAG,SAAS,CAACT,KAAV,CAAgBa,KAAhB,IAAyBV,OAAO,GAAG,GAAH,GAAS,GAAzC;UACAM,SAAS,CAACN,OAAV,GAAoB,CAACA,OAArB;UACA,OAAOM,SAAP;QACD;;MAED;QACE;IAvBJ;;IAyBA,OAAOH,KAAP;EACD,CA3BD,CATiB,CAsCjB;EACA;EACA;;;EACA,MAAM,CAACA,KAAD,EAAQU,QAAR,IAAoBpB,UAAU,CAACS,WAAD,EAAcN,YAAd,CAApC,CAzCiB,CA0CjB;EACA;EACA;;EACA,MAAMe,MAAM,GAAGjB,eAAe,CAACS,KAAK,CAACN,KAAP,CAA9B;;EACA,MAAMiB,WAAW,GAAIJ,KAAD,IAAW;IAC7B;IACA;IACA;IACA;IACAG,QAAQ,CAAC;MACPR,IAAI,EAAE,OADC;MAEPO,OAAO,EAAE;QACPF,KADO;QAEPC;MAFO;IAFF,CAAD,CAAR;EAOD,CAZD,CA9CiB,CA2DjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,MAAMI,eAAe,GAAG,MAAM;IAC5BF,QAAQ,CAAC;MACPR,IAAI,EAAE;IADC,CAAD,CAAR,CAD4B,CAI5B;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CAXD;;EAYA,oBACE;IAAA,wBACE,QAAC,KAAD;MAAO,KAAK,EAAEF,KAAK,CAACN,KAApB;MAA2B,OAAO,EAAEiB;IAApC;MAAA;MAAA;MAAA;IAAA,QADF,EAEGH,MAAM,iBACL;MAAK,SAAS,EAAC,aAAf;MAAA,UAA8BA,MAAM,GAAI,aAAYA,MAAO,EAAvB,GAA2B;IAA/D;MAAA;MAAA;MAAA;IAAA,QAHJ,eAKE;MAAQ,SAAS,EAAC,YAAlB;MAA+B,OAAO,EAAEI,eAAxC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CA3FD;;GAAMd,I;;KAAAA,I;AA6FN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}